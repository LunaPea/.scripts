#!/bin/sh

function main {
	if ! [ $# -eq 2 ]; then
		echo "Usage: $0 <username> <liked/made_by>"
		exit 1
	fi
	# if token not set exit
	if [ -z "$TOKEN" ]; then
		echo "Please set TOKEN environment variable"
		exit 1
	fi

	dir="."
	archive_file="$dir/download_history.tw"
	touch $archive_file
	download_file="$dir/download_file"
	rm $download_file
	username="$1"
	user_id=$(curl "https://api.twitter.com/2/users/by?usernames=$username" -H "Authorization: Bearer $TOKEN" | jq --raw-output '.["data"][].id')

	# if arg 2 is liked, then set query to liked, else set query to media made by user
	if [ "$2" = "liked" ]; then
		query_url="https://api.twitter.com/2/users/$user_id/liked_tweets?expansions=attachments.media_keys,author_id&media.fields=url,variants"
	elif [ "$2" = "made_by" ]; then
		query_url="https://api.twitter.com/2/users/$user_id/tweets?exclude=retweets,replies&expansions=attachments.media_keys,author_id&max_results=100&media.fields=url,variants"
	else
		echo "Invalid argument. Please enter 'liked' or 'made_by'"
		exit 1
	fi

	liked_list=$(curl $query_url -H "Authorization: Bearer $TOKEN")
	next_token=$(echo $liked_list | jq --raw-output '.["meta"].next_token')
	while ! echo $next_token | grep -q "null"; do
		media_ids="$(echo $liked_list | jq --raw-output '.["includes"]["media"][].media_key')"
		for media_id in $media_ids; do
			if ! grep -q $media_id $archive_file; then
				link=$(echo $liked_list | jq --raw-output '.["includes"]["media"][] | select(.media_key == "'$media_id'") | .url')
				if [ "$link" == "null" ]; then
					link=$(echo $liked_list | jq --raw-output '.["includes"]["media"][] | select(.media_key == "'$media_id'") | .["variants"] | max_by(.["bit_rate"]) | .["url"]')
				fi
				post_json=$(echo $liked_list | jq --raw-output '.["data"][] | select(.attachments != null) | select(.attachments.media_keys[] == "'$media_id'")')
				author_id=$(echo $post_json | jq --raw-output '.author_id')
				author_json=$(echo $liked_list | jq --raw-output '.["includes"]["users"][] | select(.id == "'$author_id'")')
				if [ "$link" != "" ]; then
					echo $media_id >> $download_file
					echo $author_id >> $download_file
					echo $link >> $download_file
					echo $post_json >> $download_file
					echo $author_json >> $download_file
				fi
			fi
		done
		liked_list=$(curl "$query_url&pagination_token=$next_token" -H "Authorization: Bearer $TOKEN")
		next_token=$(echo $liked_list | jq --raw-output '.["meta"].next_token')
	done

	i=$(cat $archive_file | wc -l)
	while [ $(cat $download_file | wc -l) != 0 ]; do
		i=$(echo $i+1 | bc)
		author_json=$(tail -n1 $download_file)
		sed -i '$d' $download_file
		post_json=$(tail -n1 $download_file)
		sed -i '$d' $download_file
		link=$(tail -n1 $download_file)
		sed -i '$d' $download_file
		author_id=$(tail -n1 $download_file)
		sed -i '$d' $download_file
		media_id=$(tail -n1 $download_file)
		sed -i '$d' $download_file

		title=$(echo $link | awk -F/ '{print $NF}' | awk -F? '{print $1}')
		text=$(echo $post_json | jq --raw-output '.text')
		username=$(echo $author_json | jq --raw-output '.username')
		name=$(echo $author_json | jq --raw-output '.name')
		post_id=$(echo $post_json | jq --raw-output '.id')
		filename="$i"_$title
		curl $link --output "$filename"
		exiftool -overwrite_original\
			-Comment="$text"\
			-Label="$i"\
			-Author="$username"\
			-Artist="$name"\
			-Source="https://twitter.com/$author_id/status/$post_id"\
			$filename
		echo $media_id >> $archive_file
	done
	fix_filenames
}

function fix_filenames {
	# fixing filenames with zeros so listing them is actually correct
	for file in $(ls *_*.png *_*.jpg *_*.mp4); do
		i=$(echo $(cat ./download_history.tw | wc -l | wc -m)-$(echo $file | cut -d'_' -f1 | wc -m ) | bc)
		while [ $i -ge 1 ]; do
			i=$(echo $i-1 | bc)
			mv $file 0$file
			file=0$file
		done
	done
}

main $@
